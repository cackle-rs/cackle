[sandbox]
kind = "Bubblewrap"
allow_read = [
    "/usr"
]

[perm.fs]
include = [
    "std::fs",
    "std::path",
    "std::io",
    "std::os::linux::fs",
    "std::os::unix::fs",
    "std::os::unix::io",
    "std::os::wasi::fs",
    "std::os::wasi::io",
    "std::os::windows::fs",
    "std::os::windows::io",
    # std::env provides quite a few functions that return paths, which can in
    # turn allow filesystem access.
    "std::env",
]
exclude = [
    "std::io::stdio",
    "std::env::var",
    "std::env::var_os",
    "std::env::vars",
    "std::env::vars_os",
    "std::env::args",
]

[perm.env]
include = ["std::env"]

[perm.net]
include = [
    "std::net",
    "std::os::unix::net",
    "std::os::wasi::net",
    "std::os::windows::net",
]

[perm.process]
include = [
    "std::process",
    "std::unix::process",
    "std::windows::process",
]
exclude = [
    "std::process::abort",
    "std::process::exit",
]

[perm.terminate]
include = [
    "std::process::abort",
    "std::process::exit",
]

[crate.crab1]
allow = [ "unsafe" ]

[crate.crab2]
allow = [
    "fs",
    "unsafe",
]

[crate.crab3]
allow = [
    "terminate",
    # Code in a file that's generated by build.rs.
    "env",
    "unsafe",
]

[crate.crab3.build]
allow = [
    "env",
    "fs",
]
